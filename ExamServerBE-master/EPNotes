Exam portal server-

Steps to perform-

1. Create the maven project with dependencies like spring-web, mysql driver , spring jpa.

2. Now is to configure the DataSource/database settings and JPA/Hibernate settings in application.properties file which
   is same as config.xml in spring.
   
   # DataSource/database settings
   spring.datasource.url=jdbc:mysql://localhost:3306/exam
   spring.datasource.username=root
   spring.datasource.password=root
   spring.datasource.driver-class-name=com.mysql.jdbc.Driver

   # JPA/Hibernate settings
   spring.jpa.show-sql=true
   spring.jpa.hibernate.ddl-auto=update
   spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
   spring.jpa.properties.hibernate.format_sql=true
   
3. Next step is to create a User & Role Entity in Model package which will contains all the entity related classes.
   @Entity - Used to mark a Java class as a persistent JPA entity, which means it is mapped to a database table or view.
   
   Our program will automatically create the tables of this entities in the database and if we ever want to add some new
   columns , we can directly add the field name in the entity class and it will again add the col in the database too.
   That is one of the main advantages of using Hibernate.
   
4. Now we need another UserRole entity which will exactly tell us which user has which kind of roles. Single user can have
   more than one role. Therefore we need to create an object of UserRole in our User class.
     
5. Next step is to create a UserRepository interface which contains all our methods. This interface will extends the 
   JPAReposritory of User class and its Id. And similarly for role, we'll have RoleRepository.
   
6. Now we need a package which will contains all the database related code hence Service classes.
   Means UserService interface which will contains methods like creating user , deleting, updating etc. Similarly for 
   RoleService. All we need now is the implementation classes for these interfaces i.e UserServiceImpl & RoleServiceImpl.
   
   These implementations class will implements the methods present in their respective services/interfaces like creating 
   user. 
   
7. Lastly in main class, we will use the object of UserService to call the createUser() from their impl class. But to do 
   so , we first every details like User details , Role Details , UserRoleSet details and userRole details hence their
   objects are need for the same. 
   
** How de we directly get the data from the UI-

a. For this , we first need UserController to have the handler method for this i.e createUser() , this method first require
   the User object to save the upcoming data.
   public User createUser(@RequestBody User user){}
   
   - The only steps is same as in Implementation class. First we need the Role object to store the Role data like roleID and
     roleType.
   - Next is UserRole object to set the User and Role for the same.
   - Next is Set<UserRole> roles = new HashSet<>() to add the above userRole object.    
   - And finally the UserService object to call the createUser() as an return type which will take the User object and Roles
     object as an parameter. This will return the all data of the User entered from the UI.
   - Now we don't need to add the User and Role data from our main class.
   
  Now to see the result , we can use Postman application to check. To check this API, fill the details like -
  -> Method type is Post since our method is recieving the data from the UI.
  -> Pass the link as localhost:8080/user/
  -> Enter the body details, select raw and select JSON as type and enter the details directly in form of object-
     
     {
    "userName":"sujeet12",
    "firstName":"Sujit",
    "lastName": "Kumar",
    "email": "sujeet12@gmail.com",
    "password":"12345",
    "profile":"test.jpg"
    } 
    
  After entering all the details , Send the details. This will automatically fire all the related queries to fill the 
  details in Users tables. This means our API is working properly. 
  
b. Similarly to fetch the data by entering Username, we have created getUser() handler method/End point .
  -> This method use the UserService method getUser() which has the same function as of this.
  -> Here we pass the Url with Username to fetch the data example- localhost:8080/user/sujeet12
     This will give us all the data about this user.
    
  -> This is done by first creating the getUser() in UserService and implements the method in UserServiceImpl and then
     finally using it in UserController. All of the other methods will be create following this order.
     
     
** JWT Authentication Spring security -
   First step is to use the dependency of spring boot starter security, JaxB API(For above java 8 version) and 
   JSON web token support for JVM in pom.xml
   With the help of this dependencies , all of our API automatically has been authenticated and can be used only with
   by using generated username and security password: 0f0615a0-8a18-49b8-b983-6191c5a3f928 .
   
   How does this work -
   After using the dependencies, Spring has started using methods from UserDetails interface. But since it is an interface,
   we needs this interface as well as its implementation class. So the best way to use this is by implementing the 
   interface by User model itself, in this way User class can use all the methods present in the UserDetail interface.
   
   The main work of JWT authentication is to get the username and password from the user and check it with the database and
   if it's correct then return the response in form of token.
   
   Steps to follow -
   1. Use the User class to implements UserDetails interface to get their methods.
   2. Create the Authority class to grant the authority to user(admin/normal).
   3. Use the Authority class to store the set of authority in User class  getAuthorities().
   4. And create the JwtRequest and JwtResponse class for proper validation.
   5. All of these actions should be taken under Model classes.
   6. Create the implementation of User in impl package as UserDetailsServiceImpl and write down its implementation.
      This will simple return the User if proper authentication is done. 
   
** Configuration of Spring security and JWT Authentication -
   
    -> First of all , the user/client will call a POST/generateToken or POST/authenticate method by to get the Token to move
       forward by passing the username and password to the server. This will tell the server that this particular user is 
       valid or not , if he has the right credentials then it is the valid user otherwise not.
       
    -> Now the server will validate the username and credentials , if it is correct then this will generate a Token using 
       secret key (Json Web Token/JWT Token).
       
    -> Server will send the JWT to the client again.
    
    -> Now the client will again send the request with JWT in the header and now the server will validate the token with the
       security key and then it will return the response .
       
    All of these configuration has to be done in config file (MySecurityConfig class) , the configuration of spring 
    security and jwt authentication are pretty much same for every application having the procedure as above. 
    
    We required couple of things first like JwtAuthenticationEntryPoint class which will handle all the unauthorized requests
    and send the error according to them. 
    Another important class is JwtAuthenticationfilter which has the method to validate the JWT obtained from the Header.
         
    Both of these classes required other classes object to perform their operations. The implementation of these methods are
    written in their respective class.
    
** Now we need is to generate the JWToken -
   First of all create the AuthenticateController where we will write our handler method to generate token for the user.
   Without the user, we are not able to use any Api.
   
   This method will take the JWTrequest fileds as an input and will store them in the Jwtrequest object and then will
   call the authenticate() method for the username and password validation.
      
** Here's a breakdown of what the authenticate() method does:-
   
   private void authenticate(String username, String password) throws Exception{
		
		try {
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
		}
		catch(DisabledException e) {
			throw new Exception("USER DISABLED" +  e.getMessage());
		}
		catch(BadCredentialsException e) {
			throw new Exception("INVALID CREDENTIALS"+ e.getMessage());
		}
	}
   
   * The authenticate method takes in the username and password as parameters.
   * It calls the authenticate method of the authenticationManager object, passing a UsernamePasswordAuthenticationToken 
     containing the provided username and password.
   * If the authentication is successful, the method will proceed normally.
   * If the authenticationManager throws a DisabledException, it means the user is disabled, and the method throws an 
     exception with a message indicating "USER DISABLED" and the original exception message.
   * If the authenticationManager throws a BadCredentialsException, it means the provided credentials are invalid, and 
     the method throws an exception with a message indicating "INVALID CREDENTIALS" and the original exception message.
     
 ** Here's a breakdown of what the generateToken() method does:- 
 
   	// Handler method to generate the JWT -   
    @PostMapping("/generate-token")
	public ResponseEntity<?> generateToken(@RequestBody JwtRequest jwtRequest) throws Exception{
		
		try {
			authenticate(jwtRequest.getUsername(), jwtRequest.getPassword());
		}
		catch(UsernameNotFoundException e) {
			e.getStackTrace();
			throw new Exception("User not found");
		}
		
		UserDetails userDetails = this.userDetailsServiceImpl.loadUserByUsername(jwtRequest.getUsername());
		String token = this.jwtUtil.generateToken(userDetails);
		return ResponseEntity.ok(new JwtResponse(token));
		
	}
       
   - The generateToken method is annotated with @PostMapping and expects a JSON request body of type JwtRequest, 
     which likely contains the username and password for authentication.
   - The authenticate method is called, passing the username and password from the jwtRequest object. This method is 
     responsible for authenticating the user based on the provided credentials.
   - If the authentication is successful, the method proceeds.
   - If a UsernameNotFoundException is thrown, it means that the user with the provided username was not found. In this 
     case, an exception is thrown with a message stating "User not found", and the exception stack trace is logged.
   - If the authentication is successful, the loadUserByUsername method is called on a userDetailsServiceImpl object, 
     passing the username from the jwtRequest. This method should load the user details (e.g., roles, authorities) from 
     a data source and return a UserDetails object.
   - The generateToken method of a jwtUtil object is called, passing the userDetails object. This method generates a JWT 
     token based on the provided user details.
   - Finally, a ResponseEntity is returned with the generated token wrapped in a JwtResponse object. 
     The ResponseEntity.ok() method is used to indicate a successful response, and the token is included in the 
     response body.
       
   
   
   
   
        
   
      

        
    
   
   
   
        
   
   
           
   
